{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web Development\\\\react course practice\\\\09-time-to-practice-starting-code\\\\src\\\\components\\\\quotes\\\\QuoteForm.js\",\n  _s = $RefreshSig$();\nimport { useRef, useState } from 'react';\nimport { Prompt } from 'react-router-dom';\nimport Card from '../UI/Card';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './QuoteForm.module.css';\nimport { Fragment } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuoteForm = props => {\n  _s();\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n  const [isFormDirty, setIsFormDirty] = useState(false);\n  function submitFormHandler(event) {\n    event.preventDefault();\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n    props.onAddQuote({\n      author: enteredAuthor,\n      text: enteredText\n    });\n\n    // Reset dirty flag after form submission\n    setIsFormDirty(false);\n  }\n  const inputChangeHandler = () => {\n    // Set the form as dirty whenever there is a change in the input fields\n    setIsFormDirty(true);\n  };\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Prompt, {\n      when: isFormDirty // Prompt will be shown when form is dirty\n      ,\n      message: \"You have unsaved changes. Are you sure you want to leave?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        className: classes.form,\n        onSubmit: submitFormHandler,\n        children: [props.isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.loading,\n          children: /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.control,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"author\",\n            children: \"Author\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"author\",\n            ref: authorInputRef,\n            onChange: inputChangeHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.control,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"text\",\n            children: \"Text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            id: \"text\",\n            rows: \"5\",\n            ref: textInputRef,\n            onChange: inputChangeHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.actions,\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn\",\n            children: \"Add Quote\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_s(QuoteForm, \"qQVDB2FEOEL6YpkBADHnu7WKcAI=\");\n_c = QuoteForm;\nexport default QuoteForm;\nvar _c;\n$RefreshReg$(_c, \"QuoteForm\");","map":{"version":3,"names":["useRef","useState","Prompt","Card","LoadingSpinner","classes","Fragment","jsxDEV","_jsxDEV","QuoteForm","props","_s","authorInputRef","textInputRef","isFormDirty","setIsFormDirty","submitFormHandler","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","inputChangeHandler","children","when","message","fileName","_jsxFileName","lineNumber","columnNumber","className","form","onSubmit","isLoading","loading","control","htmlFor","type","id","ref","onChange","rows","actions","_c","$RefreshReg$"],"sources":["D:/Web Development/react course practice/09-time-to-practice-starting-code/src/components/quotes/QuoteForm.js"],"sourcesContent":["import { useRef, useState } from 'react';\nimport { Prompt } from 'react-router-dom';\nimport Card from '../UI/Card';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './QuoteForm.module.css';\nimport { Fragment } from 'react';\n\nconst QuoteForm = (props) => {\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n  const [isFormDirty, setIsFormDirty] = useState(false);\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n\n    // Reset dirty flag after form submission\n    setIsFormDirty(false);\n  }\n  const inputChangeHandler = () => {\n    // Set the form as dirty whenever there is a change in the input fields\n    setIsFormDirty(true);\n  };\n\n  return (\n    <Fragment>\n      <Prompt\n        when={isFormDirty} // Prompt will be shown when form is dirty\n        message=\"You have unsaved changes. Are you sure you want to leave?\"\n      />\n      <Card>\n        <form className={classes.form} onSubmit={submitFormHandler}>\n          {props.isLoading && (\n            <div className={classes.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n\n          <div className={classes.control}>\n            <label htmlFor='author'>Author</label>\n            <input type='text' id='author' ref={authorInputRef} onChange={inputChangeHandler} />\n          </div>\n          <div className={classes.control}>\n            <label htmlFor='text'>Text</label>\n            <textarea id='text' rows='5' ref={textInputRef} onChange={inputChangeHandler}></textarea>\n          </div>\n          <div className={classes.actions}>\n            <button className='btn'>Add Quote</button>\n          </div>\n        </form>\n      </Card>\n    </Fragment>\n  );\n};\n\nexport default QuoteForm;"],"mappings":"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"},"metadata":{},"sourceType":"module"}