{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web Development\\\\react course practice\\\\Redux advance\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport Cart from \"./components/Cart/Cart\";\nimport Layout from \"./components/Layout/Layout\";\nimport Products from \"./components/Shop/Products\";\nimport { useEffect } from \"react\";\nimport { useSelector } from \"react-redux/es/hooks/useSelector\\\\\";\nimport { auth } from \"./firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const showCart = useSelector(state => state.ui.cartIsVisible);\n  const cart = useSelector(state => state.cart);\n  useEffect(() => {\n    // Check if a user is authenticated before making the POST request\n    const user = auth.currentUser; // Assuming you have set up Firebase authentication\n    if (user) {\n      fetch(\"https://react-practic-762f2-default-rtdb.firebaseio.com/cart.json\", {\n        method: \"POST\",\n        body: JSON.stringify(cart),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        if (!response.ok) {\n          throw new Error(\"Network response was not ok\");\n        }\n      }).catch(error => {\n        console.error(\"Error:\", error);\n      });\n    } else {\n      console.error(\"User is not authenticated.\"); // Handle the case where the user is not authenticated\n    }\n  }, [cart]);\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: [showCart && /*#__PURE__*/_jsxDEV(Cart, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 20\n    }, this), /*#__PURE__*/_jsxDEV(Products, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"KyXbg3VUjMrWtfZdDW0tXImD8Js=\", false, function () {\n  return [useSelector, useSelector];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Cart","Layout","Products","useEffect","useSelector","auth","jsxDEV","_jsxDEV","App","_s","showCart","state","ui","cartIsVisible","cart","user","currentUser","fetch","method","body","JSON","stringify","headers","then","response","ok","Error","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Web Development/react course practice/Redux advance/src/App.js"],"sourcesContent":["import Cart from \"./components/Cart/Cart\";\nimport Layout from \"./components/Layout/Layout\";\nimport Products from \"./components/Shop/Products\";\nimport { useEffect } from \"react\";\nimport { useSelector } from \"react-redux/es/hooks/useSelector\\\\\";\nimport { auth } from \"./firebase\";\n\nfunction App() {\n  const showCart = useSelector((state) => state.ui.cartIsVisible);\n  const cart = useSelector((state) => state.cart);\n\n  useEffect(() => {\n    // Check if a user is authenticated before making the POST request\n    const user = auth.currentUser; // Assuming you have set up Firebase authentication\n    if (user) {\n      fetch(\"https://react-practic-762f2-default-rtdb.firebaseio.com/cart.json\", {\n        method: \"POST\",\n        body: JSON.stringify(cart),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      })\n        .then((response) => {\n          if (!response.ok) {\n            throw new Error(\"Network response was not ok\");\n          }\n        })\n        .catch((error) => {\n          console.error(\"Error:\", error);\n        });\n    } else {\n      console.error(\"User is not authenticated.\"); // Handle the case where the user is not authenticated\n    }\n  }, [cart]);\n\n  return (\n    <Layout>\n      {showCart && <Cart />}\n      <Products />\n    </Layout>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,IAAI,MAAM,wBAAwB;AACzC,OAAOC,MAAM,MAAM,4BAA4B;AAC/C,OAAOC,QAAQ,MAAM,4BAA4B;AACjD,SAASC,SAAS,QAAQ,OAAO;AACjC,SAASC,WAAW,QAAQ,oCAAoC;AAChE,SAASC,IAAI,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAMC,QAAQ,GAAGN,WAAW,CAAEO,KAAK,IAAKA,KAAK,CAACC,EAAE,CAACC,aAAa,CAAC;EAC/D,MAAMC,IAAI,GAAGV,WAAW,CAAEO,KAAK,IAAKA,KAAK,CAACG,IAAI,CAAC;EAE/CX,SAAS,CAAC,MAAM;IACd;IACA,MAAMY,IAAI,GAAGV,IAAI,CAACW,WAAW,CAAC,CAAC;IAC/B,IAAID,IAAI,EAAE;MACRE,KAAK,CAAC,mEAAmE,EAAE;QACzEC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,IAAI,CAAC;QAC1BQ,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC,CACCC,IAAI,CAAEC,QAAQ,IAAK;QAClB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;QAChD;MACF,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAChC,CAAC,CAAC;IACN,CAAC,MAAM;MACLC,OAAO,CAACD,KAAK,CAAC,4BAA4B,CAAC,CAAC,CAAC;IAC/C;EACF,CAAC,EAAE,CAACd,IAAI,CAAC,CAAC;EAEV,oBACEP,OAAA,CAACN,MAAM;IAAA6B,QAAA,GACJpB,QAAQ,iBAAIH,OAAA,CAACP,IAAI;MAAA+B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACrB3B,OAAA,CAACL,QAAQ;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEb;AAACzB,EAAA,CAlCQD,GAAG;EAAA,QACOJ,WAAW,EACfA,WAAW;AAAA;AAAA+B,EAAA,GAFjB3B,GAAG;AAoCZ,eAAeA,GAAG;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}