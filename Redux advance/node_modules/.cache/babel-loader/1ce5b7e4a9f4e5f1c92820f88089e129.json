{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web Development\\\\react course practice\\\\Redux advance\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { Fragment, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Cart from './components/Cart/Cart';\nimport Layout from './components/Layout/Layout';\nimport Products from './components/Shop/Products';\nimport { uiActions } from './components/store/ui-slice';\nimport Notification from './components/UI/Notification';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet isInitial = true;\nfunction App() {\n  _s();\n  const dispatch = useDispatch();\n  const showCart = useSelector(state => state.ui.cartIsVisible);\n  const cart = useSelector(state => state.cart);\n  const notification = useSelector(state => state.ui.notification);\n  useEffect(() => {\n    const sendCartData = async () => {\n      dispatch(uiActions.showNotification({\n        status: 'pending',\n        title: 'Sending...',\n        message: 'Sending cart data!'\n      }));\n      try {\n        const response = await fetch('https://react-http-6b4a6.firebaseio.com/cart.json', {\n          method: 'POST',\n          body: JSON.stringify(cart)\n        });\n        if (!response.ok) {\n          throw new Error('Sending cart data failed.');\n        }\n        dispatch(uiActions.showNotification({\n          status: 'success',\n          title: 'Success!',\n          message: 'Sent cart data successfully!'\n        }));\n      } catch (error) {\n        console.error('Error sending cart data:', error);\n        dispatch(uiActions.showNotification({\n          status: 'error',\n          title: 'Error!',\n          message: 'Sending cart data failed!'\n        }));\n      }\n    };\n\n    // Only send cart data if it's not the initial render\n    if (!isInitial) {\n      sendCartData();\n    } else {\n      isInitial = false;\n    }\n  }, [cart, dispatch]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [notification && /*#__PURE__*/_jsxDEV(Notification, {\n      status: notification.status,\n      title: notification.title,\n      message: notification.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Layout, {\n      children: [showCart && /*#__PURE__*/_jsxDEV(Cart, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(Products, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ym533N9pcV2ZQROugfAj7yssIY8=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useEffect","useSelector","useDispatch","Cart","Layout","Products","uiActions","Notification","jsxDEV","_jsxDEV","isInitial","App","_s","dispatch","showCart","state","ui","cartIsVisible","cart","notification","sendCartData","showNotification","status","title","message","response","fetch","method","body","JSON","stringify","ok","Error","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Web Development/react course practice/Redux advance/src/App.js"],"sourcesContent":["import { Fragment, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport Cart from './components/Cart/Cart';\nimport Layout from './components/Layout/Layout';\nimport Products from './components/Shop/Products';\nimport { uiActions } from './components/store/ui-slice';\nimport Notification from './components/UI/Notification';\n\nlet isInitial = true;\n\nfunction App() {\n  const dispatch = useDispatch();\n  const showCart = useSelector((state) => state.ui.cartIsVisible);\n  const cart = useSelector((state) => state.cart);\n  const notification = useSelector((state) => state.ui.notification);\n\n  useEffect(() => {\n    const sendCartData = async () => {\n      dispatch(\n        uiActions.showNotification({\n          status: 'pending',\n          title: 'Sending...',\n          message: 'Sending cart data!',\n        })\n      );\n      try {\n        const response = await fetch(\n          'https://react-http-6b4a6.firebaseio.com/cart.json',\n          {\n            method: 'POST',\n            body: JSON.stringify(cart),\n          }\n        );\n\n        if (!response.ok) {\n          throw new Error('Sending cart data failed.');\n        }\n\n        dispatch(\n          uiActions.showNotification({\n            status: 'success',\n            title: 'Success!',\n            message: 'Sent cart data successfully!',\n          })\n        );\n      } catch (error) {\n        console.error('Error sending cart data:', error);\n        dispatch(\n          uiActions.showNotification({\n            status: 'error',\n            title: 'Error!',\n            message: 'Sending cart data failed!',\n          })\n        );\n      }\n    };\n\n    // Only send cart data if it's not the initial render\n    if (!isInitial) {\n      sendCartData();\n    } else {\n      isInitial = false;\n    }\n  }, [cart, dispatch]);\n\n  return (\n    <Fragment>\n      {notification && (\n        <Notification\n          status={notification.status}\n          title={notification.title}\n          message={notification.message}\n        />\n      )}\n      <Layout>\n        {showCart && <Cart />}\n        <Products />\n      </Layout>\n    </Fragment>\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module"}